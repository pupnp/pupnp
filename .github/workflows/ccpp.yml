name: Build

on: [push, pull_request]

jobs:
  linux:
    name: Build (${{ matrix.os }}) - ${{ matrix.conf }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04]
        conf: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Install build tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build

      - name: Build
        run: |
          cmake -G Ninja -DDOWNLOAD_AND_BUILD_DEPS=ON -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=${{ matrix.conf }} -S . -B build
          cmake --build build

      - name: Test
        run: |
          cd build
          ctest --output-on-failure

  windows:
    name: Build (${{ matrix.os }})  - ${{ matrix.conf }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-2016, windows-2019]
        conf: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Install build tools
        run: |
          choco install ninja vswhere

      - name: Build
        run: |
          $installationPath = vswhere.exe -prerelease -latest -property installationPath
          if ($installationPath -and (test-path "$installationPath\Common7\Tools\vsdevcmd.bat")) {
            & "${env:COMSPEC}" /s /c "`"$installationPath\Common7\Tools\vsdevcmd.bat`" -no_logo && set" | foreach-object {
              $name, $value = $_ -split '=', 2
              set-content env:\"$name" $value
            }
          }
          cmake -G Ninja -DBUILD_TESTING=ON -DDOWNLOAD_AND_BUILD_DEPS=ON -DCMAKE_BUILD_TYPE=${{ matrix.conf }} -S . -B build
          cmake --build build

      - name: Test
        run: |
          cd build
          ctest --output-on-failure

  macos:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest] # macos-10.15, macos-11.0
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Install build tools
        run: brew install pkg-config cmake ninja

      - name: Build
        run: |
          cmake -G Ninja -DBUILD_TESTING=ON -S . -B build
          cmake --build build

      - name: Test
        run: |
          cd build
          ctest --output-on-failure

  build_asan:
    name: Sanitizer build (ubuntu-20.04)
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1
    - name: bootstrap and configure
      run: |
        ./bootstrap
        ./configure --enable-debug \
          CFLAGS="-fsanitize=address,leak" \
          LDFLAGS="-fsanitize=address,leak"
    - name: make
      run: make
    - name: make check (upnp)
      run: cd upnp && make check || (cat test-suite.log && exit 1)
    - name: make check (ixml)
      run: cd ixml && make check || (cat test-suite.log && exit 1)
