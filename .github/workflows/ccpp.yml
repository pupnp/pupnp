name: Build

on: [push, pull_request]

jobs:
  linux:
    name: Build (${{ matrix.os }}) - ${{ matrix.conf }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04]
        conf: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake -DBUILD_TESTING=ON -DDOWNLOAD_AND_BUILD_DEPS=ON -DCMAKE_BUILD_TYPE=${{ matrix.conf }} -S . -B build

      - name: Build
        run: cmake --build build

      - name: Test
        run: |
          cd build
          ctest --output-on-failure

  windows:
    name: Build (${{ matrix.os }})  - ${{ matrix.conf }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-2016, windows-2019]
        conf: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake -DBUILD_TESTING=ON -DDOWNLOAD_AND_BUILD_DEPS=ON -DCMAKE_BUILD_TYPE=${{ matrix.conf }} -S . -B build

      - name: Build
        run: cmake --build build --config ${{ matrix.conf }}

      - name: Test Debug
        if: ${{ matrix.conf == 'Debug' }}
        run: |
          cd build
          ctest --output-on-failure -C ${{ matrix.conf }}
          type upnp/test/test_init.log

      - name: Test Release
        if: ${{ matrix.conf == 'Release' }}
        run: |
          cd build
          ctest --output-on-failure -C ${{ matrix.conf }}

  macos:
    name: Build (${{ matrix.os }}) - ${{ matrix.conf }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest] # macos-10.15, macos-11.0
        conf: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake -DBUILD_TESTING=ON -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.conf }}

      - name: Build
        run: cmake --build build --config ${{ matrix.conf }}

      - name: Test
        run: |
          cd build
          ctest --output-on-failure --C ${{ matrix.conf }}

  build_openssl:
    name: OpenSSL build (ubuntu-20.04)
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - name: bootstrap and configure
      run: |
        ./bootstrap
        ./configure --enable-debug --enable-open_ssl \
          CFLAGS="-fsanitize=address,leak" \
          LDFLAGS="-fsanitize=address,leak"
    - name: make
      run: make
    - name: make check (upnp)
      run: |
        cd upnp && make check || (cat test-suite.log && exit 1)
    - name: make check (ixml)
      run: |
        cd ixml && make check || (cat test-suite.log && exit 1)

  build_asan:
    name: Sanitizer build (ubuntu-20.04)
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1
    - name: bootstrap and configure
      run: |
        ./bootstrap
        ./configure --enable-debug \
          CFLAGS="-fsanitize=address,leak" \
          LDFLAGS="-fsanitize=address,leak"
    - name: make
      run: make
    - name: make check (upnp)
      run: |
        cd upnp && make check || (cat test-suite.log && exit 1)
    - name: make check (ixml)
      run: |
        cd ixml && make check || (cat test-suite.log && exit 1)
