name: Build

on: [push, pull_request]

jobs:
  linux:
    name: Build (${{ matrix.os }}) - ${{ matrix.conf }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04]
        conf: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake -DBUILD_TESTING=ON -DDOWNLOAD_AND_BUILD_DEPS=ON -DCMAKE_BUILD_TYPE=${{ matrix.conf }} -Dunspecified_server=ON -Dopen_ssl=ON -Dblocking_tcp_connections=ON -S . -B build

      - name: Build
        run: cmake --build build

      - name: Test
        run: |
          cd build
          ctest --output-on-failure

  windows:
    name: Build (${{ matrix.os }})  - ${{ matrix.conf }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-2016, windows-2019]
        conf: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake -DBUILD_TESTING=ON -DDOWNLOAD_AND_BUILD_DEPS=ON -DCMAKE_BUILD_TYPE=${{ matrix.conf }} -Dunspecified_server=ON -Dblocking_tcp_connections=ON -S . -B build

      - name: Build
        run: cmake --build build --config ${{ matrix.conf }}

      - name: Test Debug
        if: ${{ matrix.conf == 'Debug' }}
        run: |
          cd build
          ctest --output-on-failure -C ${{ matrix.conf }}
          type upnp/test/test_init.log
      - name: Test Release
        if: ${{ matrix.conf == 'Release' }}
        run: |
          cd build
          ctest --output-on-failure -C ${{ matrix.conf }}

  macos:
    name: Build (${{ matrix.os }}) - ${{ matrix.conf }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest] # macos-10.15, macos-11.0
        conf: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=${{ matrix.conf }} -DDOWNLOAD_AND_BUILD_DEPS=ON -Dunspecified_server=ON -Dblocking_tcp_connections=ON -S . -B build 

      - name: Build
        run: cmake --build build --config ${{ matrix.conf }}

      - name: Test
        run: |
          cd build
          ctest --output-on-failure --C ${{ matrix.conf }}
  build_asan:
    name: Sanitizer build (ubuntu-20.04) - ${{ matrix.tool }}
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        tool: [autotools, cmake]

    steps:
    - uses: actions/checkout@v1

    - name: bootstrap and configure
      if: ${{ matrix.tool == 'autotools' }}
      run: |
        ./bootstrap
        ./configure --enable-debug \
          CFLAGS="-fsanitize=address,leak" \
          LDFLAGS="-fsanitize=address,leak"
    - name: configure (cmake)
      if: ${{ matrix.tool == 'cmake' }}
      run: cmake -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=${{ matrix.conf }} -DDOWNLOAD_AND_BUILD_DEPS=ON -DCMAKE_C_FLAGS=-fsanitize=address,leak -DCMAKE_CXX_FLAGS=-fsanitize=address,leak -DCMAKE_SHARED_LINKER_FLAGS=-fsanitize=address,leak -Dunspecified_server=ON -Dopen_ssl=ON -Dblocking_tcp_connections=ON -S . -B build 

    - name: make
      if: ${{ matrix.tool == 'autotools' }}
      run: make

    - name: build
      if: ${{ matrix.tool == 'cmake' }}
      run: cmake --build build

    - name: make check (upnp)
      if: ${{ matrix.tool == 'autotools' }}
      run: cd upnp && make check && cat test_init.log || (cat test-suite.log test_init.log && exit 1)

    - name: make check (ixml)
      if: ${{ matrix.tool == 'autotools' }}
      run: cd ixml && make check || (cat test-suite.log && exit 1)

    - name: make test
      if: ${{ matrix.tool == 'cmake' }}
      run: |
          cd build
          ctest --output-on-failure
